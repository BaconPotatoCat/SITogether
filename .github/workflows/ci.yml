name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests & Linting
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run linter
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Run unit tests
        run: npm run test:ci

      - name: Security audit
        run: npm run security:audit
        continue-on-error: true

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/coverage-final.json
          flags: backend
          name: backend-coverage

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Run linter
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Run unit tests
        run: npm run test:ci

      - name: Security audit
        run: npm run security:audit
        continue-on-error: true

      - name: Build Next.js app
        run: npm run build
        env:
          NEXT_PUBLIC_BACKEND_INTERNALURL: http://sitogether-backend:5000
          NEXT_PUBLIC_BACKEND_EXTERNALURL: http://localhost:5000
          NEXT_PUBLIC_FRONTEND_INTERNALURL: http://sitogether-frontend:3000
          NEXT_PUBLIC_FRONTEND_EXTERNALURL: http://localhost:3000

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: sitogether-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: sitogether-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Code Quality Check
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # All checks passed
  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build, code-quality]
    if: always()

    steps:
      - name: Check if all jobs passed
        run: |
          if [[ "${{ needs.backend-tests.result }}" != "success" ]]; then
            echo "Backend tests failed"
            exit 1
          fi
          if [[ "${{ needs.frontend-tests.result }}" != "success" ]]; then
            echo "Frontend tests failed"
            exit 1
          fi
          if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
            echo "Docker build failed"
            exit 1
          fi
          if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
            echo "Code quality checks failed"
            exit 1
          fi
          echo "âœ… All checks passed!"

